import { Color3, E_lifeState, E_renderForDC } from "../../base/coreDefine";
import { BaseCamera } from "../../camera/baseCamera";
import { I_drawMode, I_drawModeIndexed, I_uniformBufferPart, T_uniformGroup } from "../../command/base";
import { T_vsAttribute, V_DC } from "../../command/DrawCommandGenerator";
import { BaseGeometry } from "../../geometry/baseGeometry";
import { BaseLight } from "../../light/baseLight";
import { BaseMaterial } from "../../material/baseMaterial";
import { ColorMaterial } from "../../material/standard/colorMaterial";
import { E_shaderTemplateReplaceType, I_ShaderTemplate, I_ShaderTemplate_Final, I_shaderTemplateAdd, I_shaderTemplateReplace, I_singleShaderTemplate, I_singleShaderTemplate_Final } from "../../shadermanagemnet/base";
import { SHT_MeshVS, SHT_MeshWireframeVS, SHT_PointEmuSpriteVS, SHT_PointVS } from "../../shadermanagemnet/mesh/meshVS";
import { I_EntityAttributes, I_optionBaseEntity } from "../base";
import { BaseEntity } from "../baseEntity";


/**mesh的顶点结构与材质，各有一个，一一对应 */
export interface IV_PointsEntity extends I_optionBaseEntity {

    /** 顶点属性 和几何体二选一*/
    attributes: {
        /** 顶点数据 */
        data: {
            vertices: {
                [name: string]: number[];
            },
            indexes?: number[],
            vertexStepMode?: GPUVertexStepMode,
        },
    },
    // drawMode?: I_drawMode | I_drawModeIndexed,
    /**
     * 1、默认是,webGPU的一个像素(没有emulate的情况)
     * 2、模拟的形状需要尺寸,float
    */
    size?: number,
    /**
     * 1、颜色，与material互斥
     * 2、顶点着色，需要使用VertexMaterial材质
     */
    color?: Color3,
    /**
     * 1、材质, 与颜色互斥 
     * 2、默认是没有材质，只有在emulate有值的时候才会有材质
    */
    material?: BaseMaterial, //| BaseMaterial[], 
    /** 模拟的形状     */
    emulate?: T_PointEmulate
}
export type T_PointEmulate = "none" | "square" | "circular" | "sphere" | "cube" | "sprite";


export class Points extends BaseEntity {
    declare inputValues: IV_PointsEntity;

    _material!: BaseMaterial;
    size: number = 1;
    color: Color3 = [1, 1, 1];
    emulate: T_PointEmulate = "none";
    /** 顶点数据 */
    attributes: I_EntityAttributes = {
        vertices: new Map(),
        vertexStepMode: "vertex",
        indexes: [],
    };
    positionsOfPoints: number[] = [];

    checkEmulateType(name: string): boolean {
        if (name == "none") {
            return false;
        }
        else {
            return ["square", "circular", "sphere", "cube", "sprite"].includes(name);
        }
    }
    constructor(input: IV_PointsEntity) {
        // if (input.instance == undefined && input.emulate && input.emulate != "none") {
        //     input.instance = {
        //         numInstances: input.attributes.data.vertices.position.length / 3,
        //         position: input.attributes.data.vertices.position,
        //         index:this.emulateData[this.emulate].indexes
        //     }
        // }
        super(input);
        this.inputValues = input;

        if (input.color) this.color = input.color;

        // 模拟模式
        if (input.emulate && input.emulate !== "none") {
            if (this.checkEmulateType(input.emulate)) {
                this.emulate = input.emulate;
            }
            else {
                throw new Error("Points emulate type error");
            }
            if (!input.attributes.data) {
                throw new Error("Points must have attribute data");
            }
            // 模拟存在
            if (input.attributes.data.indexes) {
                this.instance.numInstances = input.attributes.data.indexes.length;
                this.instance.index = input.attributes.data.indexes;

            }
            else {
                this.instance.numInstances = input.attributes.data.vertices.position.length / 3;
            }
            // 实例化数据
            this.instance.position = input.attributes.data.vertices.position;
            if (input.attributes.data.vertices.scale) {

                this.instance.scale = input.attributes.data.vertices.scale;

            }
            if (input.attributes.data.vertices.rotate) {
                this.instance.rotate = input.attributes.data.vertices.rotate;
            }

            //实例化模式
            // this.attributes.vertexStepMode = "instance";
            this.checkInstance();

            //设置每个instance的数据

            this.attributes.vertices.set("position", this.emulateData[this.emulate].vertices);
            this.attributes.indexes = this.emulateData[this.emulate].indexes;
            if (input.size) {
                this.size = input.size;
                if (this.instance.scale) {
                    this.instance.scale = this.instance.scale.map((v) => v * this.size);
                }
                else {
                    this.instance.scale = new Array(this.instance.position.length).fill(this.size);
                }
            }

        }
        else {//非模拟模式
            //属性数据
            if (input.attributes.data) {
                let attributes = input.attributes.data.vertices;
                // 位置数据必须存在
                if (attributes["position"] == undefined) {
                    throw new Error("Points must have position attribute");
                }
                //设置map数据
                for (let key in attributes) {
                    this.attributes.vertices.set(key, attributes[key]);
                }
                //索引数据
                if (input.attributes.data.indexes) {
                    this.attributes.indexes = input.attributes.data.indexes;
                }

                if (input.attributes.data.vertexStepMode) {
                    this.attributes.vertexStepMode = input.attributes.data.vertexStepMode;
                }
            }
            else {
                throw new Error("Points must have  attribute data");
            }
        }

        if (input.material !== undefined) {
            this._material = input.material;
        }
    }
    /**三段式初始化的第三段
     * 覆写 Root的function,因为材料类需要GPUDevice */
    async readyForGPU() {
        if (this.inputValues.material == undefined || this.inputValues.color != undefined) {
            this._material = new ColorMaterial({
                color: [...this.color, 1],
            });
            await this._material.init(this.scene, this);
        }
        else {
            await this._material.init(this.scene, this);
        }
        if (this._material.getTransparent() === true) {
            this._cullMode = "none";
        }
    }
    destroy() {
        throw new Error("Method not implemented.");
    }
    checkStatus(): boolean {
        let readyForMaterial: boolean;
        //完成状态，正常情况
        if (this._material.getReady() == E_lifeState.finished) {
            readyForMaterial = true;
        }
        //更新状态，需要重新初始化
        else if (this._material.getReady() == E_lifeState.updated) {
            readyForMaterial = true;
        }
        else {
            readyForMaterial = false;
        }
        return readyForMaterial;
    }
    generateBoxAndSphere(): void {
        if (this.checkStatus()) {
            let position: number[] = [];
            if (this.attributes.vertices.has("position")) {
                position = this.attributes.vertices.get("position") as number[];
            }
            if (position.length) {
                this.boundingBox = this.generateBox(position);
                this.boundingSphere = this.generateSphere(this.boundingBox);
            }
            else {
                console.warn("Mesh generateBoxAndSphere: position is empty");
            }
        }
    }
    getBlend(): GPUBlendState | undefined {
        return this._material.getBlend();
    }
    getTransparent(): boolean {
        if (this.emulate !== "none") {
            return this._material.getTransparent();
        }
        return false;
    }
    /**
     * 获取uniform 和shader模板输出，其中包括了uniform 对应的layout到resourceGPU的map
     * @param startBinding 
     * @returns uniformGroups: T_uniformGroup[], shaderTemplateFinal: I_ShaderTemplate_Final 
     */
    getUniformAndShaderTemplateFinal(camera: BaseCamera,startBinding: number = 0, wireFrame: boolean = false): { uniformGroups: T_uniformGroup[], shaderTemplateFinal: I_ShaderTemplate_Final } {
        //uniform 部分
        let bindingNumber = startBinding;
        let uniform1: T_uniformGroup = [];

        let unifrom10: I_uniformBufferPart = {
            label: this.Name + " uniform at group(1) binding(0)",
            binding: bindingNumber,
            size: this.getSizeOfUniformArrayBuffer(),
            data: this.getUniformArrayBuffer()
        };
        let uniform10Layout: GPUBindGroupLayoutEntry = {
            binding: bindingNumber,
            visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,
            buffer: {
                type: "uniform"
            }
        };
        let uniform10GroupAndBindingString = " @group(1) @binding(0) var<uniform> entity : ST_entity; \n ";
        this.scene.resourcesGPU.set(unifrom10, uniform10Layout);
        bindingNumber++;
        uniform1.push(unifrom10);

        //scene 和 entity 的shader模板部分
        let shaderTemplateFinal: I_ShaderTemplate_Final = {};
        let SHT_VS: I_ShaderTemplate = SHT_PointVS;

        if (this.emulate == "sprite") {
            SHT_VS = SHT_PointEmuSpriteVS;
        }
        for (let i in SHT_VS) {
            if (i == "scene") {
                let shader = this.scene.getShaderCodeOfSHT_ScenOfCamera(SHT_VS[i]);
                shaderTemplateFinal.scene = shader.scene;
            }
            else if (i == "entity") {
                shaderTemplateFinal.entity = {
                    templateString: this.formatShaderCode(SHT_VS[i], wireFrame), groupAndBindingString: uniform10GroupAndBindingString, owner: this,
                };
            }
        }
        let uniformsMaterial = this._material.getOneGroupUniformAndShaderTemplateFinal(camera,bindingNumber);

        if (uniformsMaterial) {
            uniform1.push(...uniformsMaterial.uniformGroup);
            shaderTemplateFinal.material = uniformsMaterial.singleShaderTemplateFinal;
        }
        let uniformGroups: T_uniformGroup[] = [uniform1];

        return { uniformGroups, shaderTemplateFinal };
    }

    /**
     * 获取用户自定义的shader代码
     * @returns string
     */
    getUserCodeVS(): string {
        if (this.input.shaderCode) {
            return this.input.shaderCode;
        }
        return "";
    }
    /**
     * 格式化shader代码
     * @param template 
     * @returns string
     */
    formatShaderCode(template: I_singleShaderTemplate, wireFrame: boolean = false): string {
        let code: string = "";
        for (let perOne of template.add as I_shaderTemplateAdd[]) {
            code += perOne.code;
        }
        for (let perOne of template.replace as I_shaderTemplateReplace[]) {
            if (perOne.replaceType == E_shaderTemplateReplaceType.replaceCode) {
                if (perOne.name == "userCodeVS") {
                    if (wireFrame === false) {  //wireframe 不使用用户自定义代码,此时是wireFrame =false
                        let userCodeVS = this.getUserCodeVS();
                        code = code.replace(perOne.replace, userCodeVS);
                    }
                    else {
                        code = code.replace(perOne.replace, "");
                    }
                }
                else {
                    code = code.replace(perOne.replace, perOne.replaceCode as string);
                }
            }
            else if (perOne.replaceType == E_shaderTemplateReplaceType.value) {
                code = code.replace(perOne.replace, this.instance.numInstances.toString());
            }
        }
        return code;
    }
    /**
     * 为每个camera创建前向渲染的DrawCommand
     * @param camera 
     */
    createForwardDC(camera: BaseCamera): void {
        let UUID = camera.UUID;

        //mesh 前向渲染
        let bundle = this.getUniformAndShaderTemplateFinal(camera);
        let drawMode: I_drawMode | I_drawModeIndexed;

        let drawModeMesh: I_drawMode = {
            vertexCount: 0,
            firstInstance: 0,
            instanceCount: 1,
        };
        let drawModeIndexMesh: I_drawModeIndexed = {
            indexCount: 0,//this.attributes.indexes.length,
            instanceCount: 1,
            firstIndex: 0,
            baseVertex: 0,
            firstInstance: 0,
        }

        let primitive: GPUPrimitiveState;
        if (this.emulate == "none") {
            primitive = {
                topology: "point-list",
            };
            if (this.attributes.indexes && this.attributes.indexes.length > 0) {
                drawModeIndexMesh.indexCount = this.attributes.indexes.length;
                drawModeIndexMesh.instanceCount = this.instance.numInstances;
                drawMode = drawModeIndexMesh;
            }
            else {
                if (this.attributes.vertices.has("position")) {
                    let pos = this.attributes.vertices.get("position")!;
                    if ("data" in pos) {
                        drawModeMesh.vertexCount = pos.count;
                    }
                    else {
                        drawModeMesh.vertexCount = pos.length / 3;
                    }
                }
                drawModeMesh.instanceCount = this.instance.numInstances;
                drawMode = drawModeMesh;
            }
            let valueDC: V_DC = {
                label: "DrawCommand mesh :" + this.Name + " for  camera: " + camera.UUID,
                data: {
                    vertices: this.attributes.vertices,
                    vertexStepMode: this.attributes.vertexStepMode,
                    indexes: this.attributes.indexes,
                    uniforms: bundle.uniformGroups,
                },
                render: {
                    vertex: {
                        code: bundle.shaderTemplateFinal, entryPoint: "vs",
                    },
                    fragment: {
                        entryPoint: "fs",

                    },
                    primitive,
                    drawMode,
                },
                system: {
                    UUID,
                    type: E_renderForDC.camera
                }
            };
            let dc = this.DCG.generateDrawCommand(valueDC);
            this.cameraDC[UUID].forward.push(dc);
        }
        else {
            primitive = {
                topology: "triangle-list",
            };
            if (this.attributes.indexes.length) {
                drawModeIndexMesh.indexCount = this.attributes.indexes.length;
                drawModeIndexMesh.instanceCount = this.instance.numInstances;
                drawMode = drawModeIndexMesh;
            }
            else {
                drawModeMesh.vertexCount = (this.attributes.vertices.get("position") as number[]).length;
                drawModeMesh.instanceCount = this.instance.numInstances;
                drawMode = drawModeMesh;
            }
            let valueDC: V_DC = {
                label: "DrawCommand mesh :" + this.Name + " for  camera: " + camera.UUID,
                data: {
                    vertices: this.attributes.vertices,
                    vertexStepMode: this.attributes.vertexStepMode,
                    indexes: this.attributes.indexes,
                    uniforms: bundle.uniformGroups,
                },
                render: {
                    vertex: {
                        code: bundle.shaderTemplateFinal, entryPoint: "vs",
                    },
                    fragment: {
                        entryPoint: "fs",

                    },
                    primitive,
                    drawMode,
                },
                system: {
                    UUID,
                    type: E_renderForDC.camera
                }
            };
            let dc = this.DCG.generateDrawCommand(valueDC);
            this.cameraDC[UUID].forward.push(dc);
        }
    }
    createDeferDepthDC(camera: BaseCamera): void {
        throw new Error("Method not implemented.");
    }
    createTransparent(camera: BaseCamera): void {
        throw new Error("Method not implemented.");
    }
    createShadowMapDC(light: BaseLight): void {
        throw new Error("Method not implemented.");
    }
    createShadowMapTransparentDC(light: BaseLight): void {
        throw new Error("Method not implemented.");
    }
    saveJSON() {
        throw new Error("Method not implemented.");
    }
    loadJSON(json: any): void {
        throw new Error("Method not implemented.");
    }
    /** 模拟的形状的顶点数据 */
    emulateData: {
        square: {
            vertices: number[],
            indexes: number[],
        },
        circular: {
            vertices: number[],
            indexes: number[],
        },
        sphere: {
            vertices: number[],
            indexes: number[],
        },
        cube: {
            vertices: number[],
            indexes: number[],
        },
        sprite: {
            vertices: number[],
            indexes: number[],
        },
    } = {
            square: {
                vertices: [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0],
                indexes: [0, 1, 2, 0, 2, 3],
            },
            circular: {
                vertices: [0, 0, 0, 1, 0, 0, 0.9238795325112867, 0.3826834323650898, 0, 0.7071067811865476, 0.7071067811865475, 0, 0.38268343236508984, 0.9238795325112867, 0, 6.123233995736766e-17, 1, 0, -0.3826834323650897, 0.9238795325112867, 0, -0.7071067811865475, 0.7071067811865476, 0, -0.9238795325112867, 0.3826834323650899, 0, -1, 1.2246467991473532e-16, 0, -0.9238795325112868, -0.38268343236508967, 0, -0.7071067811865477, -0.7071067811865475, 0, -0.38268343236509034, -0.9238795325112865, 0, -1.8369701987210297e-16, -1, 0, 0.38268343236509, -0.9238795325112866, 0, 0.7071067811865474, -0.7071067811865477, 0, 0.9238795325112865, -0.3826834323650904, 0, 1, -2.4492935982947064e-16, 0],
                indexes: [
                    1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6, 0, 6, 7, 0, 7, 8, 0, 8, 9, 0, 9, 10, 0, 10, 11, 0, 11, 12, 0, 12, 13, 0, 13, 14, 0, 14, 15, 0, 15, 16, 0, 16, 17, 0
                ],
            },
            sphere: {
                vertices: [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -0.3826834261417389, 0.9238795042037964, 0, -0.3535533845424652, 0.9238795042037964, 0.1464466154575348, -0.27059805393218994, 0.9238795042037964, 0.27059805393218994, -0.1464466154575348, 0.9238795042037964, 0.3535533845424652, -2.3432602348612458e-17, 0.9238795042037964, 0.3826834261417389, 0.1464466154575348, 0.9238795042037964, 0.3535533845424652, 0.27059805393218994, 0.9238795042037964, 0.27059805393218994, 0.3535533845424652, 0.9238795042037964, 0.1464466154575348, 0.3826834261417389, 0.9238795042037964, 4.6865204697224915e-17, 0.3535533845424652, 0.9238795042037964, -0.1464466154575348, 0.27059805393218994, 0.9238795042037964, -0.27059805393218994, 0.1464466154575348, 0.9238795042037964, -0.3535533845424652, 7.029780539147615e-17, 0.9238795042037964, -0.3826834261417389, -0.1464466154575348, 0.9238795042037964, -0.3535533845424652, -0.27059805393218994, 0.9238795042037964, -0.27059805393218994, -0.3535533845424652, 0.9238795042037964, -0.1464466154575348, -0.3826834261417389, 0.9238795042037964, -9.373040939444983e-17, -0.7071067690849304, 0.7071067690849304, 0, -0.6532815098762512, 0.7071067690849304, 0.27059805393218994, -0.5, 0.7071067690849304, 0.5, -0.27059805393218994, 0.7071067690849304, 0.6532815098762512, -4.329780301713277e-17, 0.7071067690849304, 0.7071067690849304, 0.27059805393218994, 0.7071067690849304, 0.6532815098762512, 0.5, 0.7071067690849304, 0.5, 0.6532815098762512, 0.7071067690849304, 0.27059805393218994, 0.7071067690849304, 0.7071067690849304, 8.659560603426554e-17, 0.6532815098762512, 0.7071067690849304, -0.27059805393218994, 0.5, 0.7071067690849304, -0.5, 0.27059805393218994, 0.7071067690849304, -0.6532815098762512, 1.2989340243395341e-16, 0.7071067690849304, -0.7071067690849304, -0.27059805393218994, 0.7071067690849304, -0.6532815098762512, -0.5, 0.7071067690849304, -0.5, -0.6532815098762512, 0.7071067690849304, -0.27059805393218994, -0.7071067690849304, 0.7071067690849304, -1.7319121206853109e-16, -0.9238795042037964, 0.3826834261417389, 0, -0.8535534143447876, 0.3826834261417389, 0.3535533845424652, -0.6532815098762512, 0.3826834261417389, 0.6532815098762512, -0.3535533845424652, 0.3826834261417389, 0.8535534143447876, -5.657130560897519e-17, 0.3826834261417389, 0.9238795042037964, 0.3535533845424652, 0.3826834261417389, 0.8535534143447876, 0.6532815098762512, 0.3826834261417389, 0.6532815098762512, 0.8535534143447876, 0.3826834261417389, 0.3535533845424652, 0.9238795042037964, 0.3826834261417389, 1.1314261121795038e-16, 0.8535534143447876, 0.3826834261417389, -0.3535533845424652, 0.6532815098762512, 0.3826834261417389, -0.6532815098762512, 0.3535533845424652, 0.3826834261417389, -0.8535534143447876, 1.6971391682692557e-16, 0.3826834261417389, -0.9238795042037964, -0.3535533845424652, 0.3826834261417389, -0.8535534143447876, -0.6532815098762512, 0.3826834261417389, -0.6532815098762512, -0.8535534143447876, 0.3826834261417389, -0.3535533845424652, -0.9238795042037964, 0.3826834261417389, -2.2628522243590076e-16, -1, 6.123234262925839e-17, 0, -0.9238795042037964, 6.123234262925839e-17, 0.3826834261417389, -0.7071067690849304, 6.123234262925839e-17, 0.7071067690849304, -0.3826834261417389, 6.123234262925839e-17, 0.9238795042037964, -6.123234262925839e-17, 6.123234262925839e-17, 1, 0.3826834261417389, 6.123234262925839e-17, 0.9238795042037964, 0.7071067690849304, 6.123234262925839e-17, 0.7071067690849304, 0.9238795042037964, 6.123234262925839e-17, 0.3826834261417389, 1, 6.123234262925839e-17, 1.2246468525851679e-16, 0.9238795042037964, 6.123234262925839e-17, -0.3826834261417389, 0.7071067690849304, 6.123234262925839e-17, -0.7071067690849304, 0.3826834261417389, 6.123234262925839e-17, -0.9238795042037964, 1.8369701465288538e-16, 6.123234262925839e-17, -1, -0.3826834261417389, 6.123234262925839e-17, -0.9238795042037964, -0.7071067690849304, 6.123234262925839e-17, -0.7071067690849304, -0.9238795042037964, 6.123234262925839e-17, -0.3826834261417389, -1, 6.123234262925839e-17, -2.4492937051703357e-16, -0.9238795042037964, -0.3826834261417389, 0, -0.8535534143447876, -0.3826834261417389, 0.3535533845424652, -0.6532815098762512, -0.3826834261417389, 0.6532815098762512, -0.3535533845424652, -0.3826834261417389, 0.8535534143447876, -5.657130560897519e-17, -0.3826834261417389, 0.9238795042037964, 0.3535533845424652, -0.3826834261417389, 0.8535534143447876, 0.6532815098762512, -0.3826834261417389, 0.6532815098762512, 0.8535534143447876, -0.3826834261417389, 0.3535533845424652, 0.9238795042037964, -0.3826834261417389, 1.1314261121795038e-16, 0.8535534143447876, -0.3826834261417389, -0.3535533845424652, 0.6532815098762512, -0.3826834261417389, -0.6532815098762512, 0.3535533845424652, -0.3826834261417389, -0.8535534143447876, 1.6971391682692557e-16, -0.3826834261417389, -0.9238795042037964, -0.3535533845424652, -0.3826834261417389, -0.8535534143447876, -0.6532815098762512, -0.3826834261417389, -0.6532815098762512, -0.8535534143447876, -0.3826834261417389, -0.3535533845424652, -0.9238795042037964, -0.3826834261417389, -2.2628522243590076e-16, -0.7071067690849304, -0.7071067690849304, 0, -0.6532815098762512, -0.7071067690849304, 0.27059805393218994, -0.5, -0.7071067690849304, 0.5, -0.27059805393218994, -0.7071067690849304, 0.6532815098762512, -4.329780301713277e-17, -0.7071067690849304, 0.7071067690849304, 0.27059805393218994, -0.7071067690849304, 0.6532815098762512, 0.5, -0.7071067690849304, 0.5, 0.6532815098762512, -0.7071067690849304, 0.27059805393218994, 0.7071067690849304, -0.7071067690849304, 8.659560603426554e-17, 0.6532815098762512, -0.7071067690849304, -0.27059805393218994, 0.5, -0.7071067690849304, -0.5, 0.27059805393218994, -0.7071067690849304, -0.6532815098762512, 1.2989340243395341e-16, -0.7071067690849304, -0.7071067690849304, -0.27059805393218994, -0.7071067690849304, -0.6532815098762512, -0.5, -0.7071067690849304, -0.5, -0.6532815098762512, -0.7071067690849304, -0.27059805393218994, -0.7071067690849304, -0.7071067690849304, -1.7319121206853109e-16, -0.3826834261417389, -0.9238795042037964, 0, -0.3535533845424652, -0.9238795042037964, 0.1464466154575348, -0.27059805393218994, -0.9238795042037964, 0.27059805393218994, -0.1464466154575348, -0.9238795042037964, 0.3535533845424652, -2.3432602348612458e-17, -0.9238795042037964, 0.3826834261417389, 0.1464466154575348, -0.9238795042037964, 0.3535533845424652, 0.27059805393218994, -0.9238795042037964, 0.27059805393218994, 0.3535533845424652, -0.9238795042037964, 0.1464466154575348, 0.3826834261417389, -0.9238795042037964, 4.6865204697224915e-17, 0.3535533845424652, -0.9238795042037964, -0.1464466154575348, 0.27059805393218994, -0.9238795042037964, -0.27059805393218994, 0.1464466154575348, -0.9238795042037964, -0.3535533845424652, 7.029780539147615e-17, -0.9238795042037964, -0.3826834261417389, -0.1464466154575348, -0.9238795042037964, -0.3535533845424652, -0.27059805393218994, -0.9238795042037964, -0.27059805393218994, -0.3535533845424652, -0.9238795042037964, -0.1464466154575348, -0.3826834261417389, -0.9238795042037964, -9.373040939444983e-17, -1.2246468525851679e-16, -1, 0, -1.1314261121795038e-16, -1, 4.6865204697224915e-17, -8.659560603426554e-17, -1, 8.659560603426554e-17, -4.6865204697224915e-17, -1, 1.1314261121795038e-16, -7.498798786105971e-33, -1, 1.2246468525851679e-16, 4.6865204697224915e-17, -1, 1.1314261121795038e-16, 8.659560603426554e-17, -1, 8.659560603426554e-17, 1.1314261121795038e-16, -1, 4.6865204697224915e-17, 1.2246468525851679e-16, -1, 1.4997597572211942e-32, 1.1314261121795038e-16, -1, -4.6865204697224915e-17, 8.659560603426554e-17, -1, -8.659560603426554e-17, 4.6865204697224915e-17, -1, -1.1314261121795038e-16, 2.2496396358317913e-32, -1, -1.2246468525851679e-16, -4.6865204697224915e-17, -1, -1.1314261121795038e-16, -8.659560603426554e-17, -1, -8.659560603426554e-17, -1.1314261121795038e-16, -1, -4.6865204697224915e-17, -1.2246468525851679e-16, -1, -2.9995195144423884e-32, 0.3826834261417389, -0.9238795042037964, 0, 0.3535533845424652, -0.9238795042037964, -0.1464466154575348, 0.27059805393218994, -0.9238795042037964, -0.27059805393218994, 0.1464466154575348, -0.9238795042037964, -0.3535533845424652, 2.3432602348612458e-17, -0.9238795042037964, -0.3826834261417389, -0.1464466154575348, -0.9238795042037964, -0.3535533845424652, -0.27059805393218994, -0.9238795042037964, -0.27059805393218994, -0.3535533845424652, -0.9238795042037964, -0.1464466154575348, -0.3826834261417389, -0.9238795042037964, -4.6865204697224915e-17, -0.3535533845424652, -0.9238795042037964, 0.1464466154575348, -0.27059805393218994, -0.9238795042037964, 0.27059805393218994, -0.1464466154575348, -0.9238795042037964, 0.3535533845424652, -7.029780539147615e-17, -0.9238795042037964, 0.3826834261417389, 0.1464466154575348, -0.9238795042037964, 0.3535533845424652, 0.27059805393218994, -0.9238795042037964, 0.27059805393218994, 0.3535533845424652, -0.9238795042037964, 0.1464466154575348, 0.3826834261417389, -0.9238795042037964, 9.373040939444983e-17, 0.7071067690849304, -0.7071067690849304, 0, 0.6532815098762512, -0.7071067690849304, -0.27059805393218994, 0.5, -0.7071067690849304, -0.5, 0.27059805393218994, -0.7071067690849304, -0.6532815098762512, 4.329780301713277e-17, -0.7071067690849304, -0.7071067690849304, -0.27059805393218994, -0.7071067690849304, -0.6532815098762512, -0.5, -0.7071067690849304, -0.5, -0.6532815098762512, -0.7071067690849304, -0.27059805393218994, -0.7071067690849304, -0.7071067690849304, -8.659560603426554e-17, -0.6532815098762512, -0.7071067690849304, 0.27059805393218994, -0.5, -0.7071067690849304, 0.5, -0.27059805393218994, -0.7071067690849304, 0.6532815098762512, -1.2989340243395341e-16, -0.7071067690849304, 0.7071067690849304, 0.27059805393218994, -0.7071067690849304, 0.6532815098762512, 0.5, -0.7071067690849304, 0.5, 0.6532815098762512, -0.7071067690849304, 0.27059805393218994, 0.7071067690849304, -0.7071067690849304, 1.7319121206853109e-16, 0.9238795042037964, -0.3826834261417389, 0, 0.8535534143447876, -0.3826834261417389, -0.3535533845424652, 0.6532815098762512, -0.3826834261417389, -0.6532815098762512, 0.3535533845424652, -0.3826834261417389, -0.8535534143447876, 5.657130560897519e-17, -0.3826834261417389, -0.9238795042037964, -0.3535533845424652, -0.3826834261417389, -0.8535534143447876, -0.6532815098762512, -0.3826834261417389, -0.6532815098762512, -0.8535534143447876, -0.3826834261417389, -0.3535533845424652, -0.9238795042037964, -0.3826834261417389, -1.1314261121795038e-16, -0.8535534143447876, -0.3826834261417389, 0.3535533845424652, -0.6532815098762512, -0.3826834261417389, 0.6532815098762512, -0.3535533845424652, -0.3826834261417389, 0.8535534143447876, -1.6971391682692557e-16, -0.3826834261417389, 0.9238795042037964, 0.3535533845424652, -0.3826834261417389, 0.8535534143447876, 0.6532815098762512, -0.3826834261417389, 0.6532815098762512, 0.8535534143447876, -0.3826834261417389, 0.3535533845424652, 0.9238795042037964, -0.3826834261417389, 2.2628522243590076e-16, 1, -1.8369701465288538e-16, 0, 0.9238795042037964, -1.8369701465288538e-16, -0.3826834261417389, 0.7071067690849304, -1.8369701465288538e-16, -0.7071067690849304, 0.3826834261417389, -1.8369701465288538e-16, -0.9238795042037964, 6.123234262925839e-17, -1.8369701465288538e-16, -1, -0.3826834261417389, -1.8369701465288538e-16, -0.9238795042037964, -0.7071067690849304, -1.8369701465288538e-16, -0.7071067690849304, -0.9238795042037964, -1.8369701465288538e-16, -0.3826834261417389, -1, -1.8369701465288538e-16, -1.2246468525851679e-16, -0.9238795042037964, -1.8369701465288538e-16, 0.3826834261417389, -0.7071067690849304, -1.8369701465288538e-16, 0.7071067690849304, -0.3826834261417389, -1.8369701465288538e-16, 0.9238795042037964, -1.8369701465288538e-16, -1.8369701465288538e-16, 1, 0.3826834261417389, -1.8369701465288538e-16, 0.9238795042037964, 0.7071067690849304, -1.8369701465288538e-16, 0.7071067690849304, 0.9238795042037964, -1.8369701465288538e-16, 0.3826834261417389, 1, -1.8369701465288538e-16, 2.4492937051703357e-16, 0.9238795042037964, 0.3826834261417389, 0, 0.8535534143447876, 0.3826834261417389, -0.3535533845424652, 0.6532815098762512, 0.3826834261417389, -0.6532815098762512, 0.3535533845424652, 0.3826834261417389, -0.8535534143447876, 5.657130560897519e-17, 0.3826834261417389, -0.9238795042037964, -0.3535533845424652, 0.3826834261417389, -0.8535534143447876, -0.6532815098762512, 0.3826834261417389, -0.6532815098762512, -0.8535534143447876, 0.3826834261417389, -0.3535533845424652, -0.9238795042037964, 0.3826834261417389, -1.1314261121795038e-16, -0.8535534143447876, 0.3826834261417389, 0.3535533845424652, -0.6532815098762512, 0.3826834261417389, 0.6532815098762512, -0.3535533845424652, 0.3826834261417389, 0.8535534143447876, -1.6971391682692557e-16, 0.3826834261417389, 0.9238795042037964, 0.3535533845424652, 0.3826834261417389, 0.8535534143447876, 0.6532815098762512, 0.3826834261417389, 0.6532815098762512, 0.8535534143447876, 0.3826834261417389, 0.3535533845424652, 0.9238795042037964, 0.3826834261417389, 2.2628522243590076e-16, 0.7071067690849304, 0.7071067690849304, 0, 0.6532815098762512, 0.7071067690849304, -0.27059805393218994, 0.5, 0.7071067690849304, -0.5, 0.27059805393218994, 0.7071067690849304, -0.6532815098762512, 4.329780301713277e-17, 0.7071067690849304, -0.7071067690849304, -0.27059805393218994, 0.7071067690849304, -0.6532815098762512, -0.5, 0.7071067690849304, -0.5, -0.6532815098762512, 0.7071067690849304, -0.27059805393218994, -0.7071067690849304, 0.7071067690849304, -8.659560603426554e-17, -0.6532815098762512, 0.7071067690849304, 0.27059805393218994, -0.5, 0.7071067690849304, 0.5, -0.27059805393218994, 0.7071067690849304, 0.6532815098762512, -1.2989340243395341e-16, 0.7071067690849304, 0.7071067690849304, 0.27059805393218994, 0.7071067690849304, 0.6532815098762512, 0.5, 0.7071067690849304, 0.5, 0.6532815098762512, 0.7071067690849304, 0.27059805393218994, 0.7071067690849304, 0.7071067690849304, 1.7319121206853109e-16, 0.3826834261417389, 0.9238795042037964, 0, 0.3535533845424652, 0.9238795042037964, -0.1464466154575348, 0.27059805393218994, 0.9238795042037964, -0.27059805393218994, 0.1464466154575348, 0.9238795042037964, -0.3535533845424652, 2.3432602348612458e-17, 0.9238795042037964, -0.3826834261417389, -0.1464466154575348, 0.9238795042037964, -0.3535533845424652, -0.27059805393218994, 0.9238795042037964, -0.27059805393218994, -0.3535533845424652, 0.9238795042037964, -0.1464466154575348, -0.3826834261417389, 0.9238795042037964, -4.6865204697224915e-17, -0.3535533845424652, 0.9238795042037964, 0.1464466154575348, -0.27059805393218994, 0.9238795042037964, 0.27059805393218994, -0.1464466154575348, 0.9238795042037964, 0.3535533845424652, -7.029780539147615e-17, 0.9238795042037964, 0.3826834261417389, 0.1464466154575348, 0.9238795042037964, 0.3535533845424652, 0.27059805393218994, 0.9238795042037964, 0.27059805393218994, 0.3535533845424652, 0.9238795042037964, 0.1464466154575348, 0.3826834261417389, 0.9238795042037964, 9.373040939444983e-17, 2.4492937051703357e-16, 1, 0, 2.2628522243590076e-16, 1, -9.373040939444983e-17, 1.7319121206853109e-16, 1, -1.7319121206853109e-16, 9.373040939444983e-17, 1, -2.2628522243590076e-16, 1.4997597572211942e-32, 1, -2.4492937051703357e-16, -9.373040939444983e-17, 1, -2.2628522243590076e-16, -1.7319121206853109e-16, 1, -1.7319121206853109e-16, -2.2628522243590076e-16, 1, -9.373040939444983e-17, -2.4492937051703357e-16, 1, -2.9995195144423884e-32, -2.2628522243590076e-16, 1, 9.373040939444983e-17, -1.7319121206853109e-16, 1, 1.7319121206853109e-16, -9.373040939444983e-17, 1, 2.2628522243590076e-16, -4.4992792716635827e-32, 1, 2.4492937051703357e-16, 9.373040939444983e-17, 1, 2.2628522243590076e-16, 1.7319121206853109e-16, 1, 1.7319121206853109e-16, 2.2628522243590076e-16, 1, 9.373040939444983e-17, 2.4492937051703357e-16, 1, 5.999039028884777e-32],
                indexes: [0, 17, 18, 1, 18, 19, 2, 19, 20, 3, 20, 21, 4, 21, 22, 5, 22, 23, 6, 23, 24, 7, 24, 25, 8, 25, 26, 9, 26, 27, 10, 27, 28, 11, 28, 29, 12, 29, 30, 13, 30, 31, 14, 31, 32, 15, 32, 33, 18, 17, 35, 17, 34, 35, 19, 18, 36, 18, 35, 36, 20, 19, 37, 19, 36, 37, 21, 20, 38, 20, 37, 38, 22, 21, 39, 21, 38, 39, 23, 22, 40, 22, 39, 40, 24, 23, 41, 23, 40, 41, 25, 24, 42, 24, 41, 42, 26, 25, 43, 25, 42, 43, 27, 26, 44, 26, 43, 44, 28, 27, 45, 27, 44, 45, 29, 28, 46, 28, 45, 46, 30, 29, 47, 29, 46, 47, 31, 30, 48, 30, 47, 48, 32, 31, 49, 31, 48, 49, 33, 32, 50, 32, 49, 50, 35, 34, 52, 34, 51, 52, 36, 35, 53, 35, 52, 53, 37, 36, 54, 36, 53, 54, 38, 37, 55, 37, 54, 55, 39, 38, 56, 38, 55, 56, 40, 39, 57, 39, 56, 57, 41, 40, 58, 40, 57, 58, 42, 41, 59, 41, 58, 59, 43, 42, 60, 42, 59, 60, 44, 43, 61, 43, 60, 61, 45, 44, 62, 44, 61, 62, 46, 45, 63, 45, 62, 63, 47, 46, 64, 46, 63, 64, 48, 47, 65, 47, 64, 65, 49, 48, 66, 48, 65, 66, 50, 49, 67, 49, 66, 67, 52, 51, 69, 51, 68, 69, 53, 52, 70, 52, 69, 70, 54, 53, 71, 53, 70, 71, 55, 54, 72, 54, 71, 72, 56, 55, 73, 55, 72, 73, 57, 56, 74, 56, 73, 74, 58, 57, 75, 57, 74, 75, 59, 58, 76, 58, 75, 76, 60, 59, 77, 59, 76, 77, 61, 60, 78, 60, 77, 78, 62, 61, 79, 61, 78, 79, 63, 62, 80, 62, 79, 80, 64, 63, 81, 63, 80, 81, 65, 64, 82, 64, 81, 82, 66, 65, 83, 65, 82, 83, 67, 66, 84, 66, 83, 84, 69, 68, 86, 68, 85, 86, 70, 69, 87, 69, 86, 87, 71, 70, 88, 70, 87, 88, 72, 71, 89, 71, 88, 89, 73, 72, 90, 72, 89, 90, 74, 73, 91, 73, 90, 91, 75, 74, 92, 74, 91, 92, 76, 75, 93, 75, 92, 93, 77, 76, 94, 76, 93, 94, 78, 77, 95, 77, 94, 95, 79, 78, 96, 78, 95, 96, 80, 79, 97, 79, 96, 97, 81, 80, 98, 80, 97, 98, 82, 81, 99, 81, 98, 99, 83, 82, 100, 82, 99, 100, 84, 83, 101, 83, 100, 101, 86, 85, 103, 85, 102, 103, 87, 86, 104, 86, 103, 104, 88, 87, 105, 87, 104, 105, 89, 88, 106, 88, 105, 106, 90, 89, 107, 89, 106, 107, 91, 90, 108, 90, 107, 108, 92, 91, 109, 91, 108, 109, 93, 92, 110, 92, 109, 110, 94, 93, 111, 93, 110, 111, 95, 94, 112, 94, 111, 112, 96, 95, 113, 95, 112, 113, 97, 96, 114, 96, 113, 114, 98, 97, 115, 97, 114, 115, 99, 98, 116, 98, 115, 116, 100, 99, 117, 99, 116, 117, 101, 100, 118, 100, 117, 118, 103, 102, 120, 102, 119, 120, 104, 103, 121, 103, 120, 121, 105, 104, 122, 104, 121, 122, 106, 105, 123, 105, 122, 123, 107, 106, 124, 106, 123, 124, 108, 107, 125, 107, 124, 125, 109, 108, 126, 108, 125, 126, 110, 109, 127, 109, 126, 127, 111, 110, 128, 110, 127, 128, 112, 111, 129, 111, 128, 129, 113, 112, 130, 112, 129, 130, 114, 113, 131, 113, 130, 131, 115, 114, 132, 114, 131, 132, 116, 115, 133, 115, 132, 133, 117, 116, 134, 116, 133, 134, 118, 117, 135, 117, 134, 135, 120, 119, 137, 119, 136, 137, 121, 120, 138, 120, 137, 138, 122, 121, 139, 121, 138, 139, 123, 122, 140, 122, 139, 140, 124, 123, 141, 123, 140, 141, 125, 124, 142, 124, 141, 142, 126, 125, 143, 125, 142, 143, 127, 126, 144, 126, 143, 144, 128, 127, 145, 127, 144, 145, 129, 128, 146, 128, 145, 146, 130, 129, 147, 129, 146, 147, 131, 130, 148, 130, 147, 148, 132, 131, 149, 131, 148, 149, 133, 132, 150, 132, 149, 150, 134, 133, 151, 133, 150, 151, 135, 134, 152, 134, 151, 152, 137, 136, 154, 136, 153, 154, 138, 137, 155, 137, 154, 155, 139, 138, 156, 138, 155, 156, 140, 139, 157, 139, 156, 157, 141, 140, 158, 140, 157, 158, 142, 141, 159, 141, 158, 159, 143, 142, 160, 142, 159, 160, 144, 143, 161, 143, 160, 161, 145, 144, 162, 144, 161, 162, 146, 145, 163, 145, 162, 163, 147, 146, 164, 146, 163, 164, 148, 147, 165, 147, 164, 165, 149, 148, 166, 148, 165, 166, 150, 149, 167, 149, 166, 167, 151, 150, 168, 150, 167, 168, 152, 151, 169, 151, 168, 169, 154, 153, 171, 153, 170, 171, 155, 154, 172, 154, 171, 172, 156, 155, 173, 155, 172, 173, 157, 156, 174, 156, 173, 174, 158, 157, 175, 157, 174, 175, 159, 158, 176, 158, 175, 176, 160, 159, 177, 159, 176, 177, 161, 160, 178, 160, 177, 178, 162, 161, 179, 161, 178, 179, 163, 162, 180, 162, 179, 180, 164, 163, 181, 163, 180, 181, 165, 164, 182, 164, 181, 182, 166, 165, 183, 165, 182, 183, 167, 166, 184, 166, 183, 184, 168, 167, 185, 167, 184, 185, 169, 168, 186, 168, 185, 186, 171, 170, 188, 170, 187, 188, 172, 171, 189, 171, 188, 189, 173, 172, 190, 172, 189, 190, 174, 173, 191, 173, 190, 191, 175, 174, 192, 174, 191, 192, 176, 175, 193, 175, 192, 193, 177, 176, 194, 176, 193, 194, 178, 177, 195, 177, 194, 195, 179, 178, 196, 178, 195, 196, 180, 179, 197, 179, 196, 197, 181, 180, 198, 180, 197, 198, 182, 181, 199, 181, 198, 199, 183, 182, 200, 182, 199, 200, 184, 183, 201, 183, 200, 201, 185, 184, 202, 184, 201, 202, 186, 185, 203, 185, 202, 203, 188, 187, 205, 187, 204, 205, 189, 188, 206, 188, 205, 206, 190, 189, 207, 189, 206, 207, 191, 190, 208, 190, 207, 208, 192, 191, 209, 191, 208, 209, 193, 192, 210, 192, 209, 210, 194, 193, 211, 193, 210, 211, 195, 194, 212, 194, 211, 212, 196, 195, 213, 195, 212, 213, 197, 196, 214, 196, 213, 214, 198, 197, 215, 197, 214, 215, 199, 198, 216, 198, 215, 216, 200, 199, 217, 199, 216, 217, 201, 200, 218, 200, 217, 218, 202, 201, 219, 201, 218, 219, 203, 202, 220, 202, 219, 220, 205, 204, 222, 204, 221, 222, 206, 205, 223, 205, 222, 223, 207, 206, 224, 206, 223, 224, 208, 207, 225, 207, 224, 225, 209, 208, 226, 208, 225, 226, 210, 209, 227, 209, 226, 227, 211, 210, 228, 210, 227, 228, 212, 211, 229, 211, 228, 229, 213, 212, 230, 212, 229, 230, 214, 213, 231, 213, 230, 231, 215, 214, 232, 214, 231, 232, 216, 215, 233, 215, 232, 233, 217, 216, 234, 216, 233, 234, 218, 217, 235, 217, 234, 235, 219, 218, 236, 218, 235, 236, 220, 219, 237, 219, 236, 237, 222, 221, 239, 221, 238, 239, 223, 222, 240, 222, 239, 240, 224, 223, 241, 223, 240, 241, 225, 224, 242, 224, 241, 242, 226, 225, 243, 225, 242, 243, 227, 226, 244, 226, 243, 244, 228, 227, 245, 227, 244, 245, 229, 228, 246, 228, 245, 246, 230, 229, 247, 229, 246, 247, 231, 230, 248, 230, 247, 248, 232, 231, 249, 231, 248, 249, 233, 232, 250, 232, 249, 250, 234, 233, 251, 233, 250, 251, 235, 234, 252, 234, 251, 252, 236, 235, 253, 235, 252, 253, 237, 236, 254, 236, 253, 254, 239, 238, 256, 238, 255, 256, 240, 239, 257, 239, 256, 257, 241, 240, 258, 240, 257, 258, 242, 241, 259, 241, 258, 259, 243, 242, 260, 242, 259, 260, 244, 243, 261, 243, 260, 261, 245, 244, 262, 244, 261, 262, 246, 245, 263, 245, 262, 263, 247, 246, 264, 246, 263, 264, 248, 247, 265, 247, 264, 265, 249, 248, 266, 248, 265, 266, 250, 249, 267, 249, 266, 267, 251, 250, 268, 250, 267, 268, 252, 251, 269, 251, 268, 269, 253, 252, 270, 252, 269, 270, 254, 253, 271, 253, 270, 271, 256, 255, 273, 257, 256, 274, 258, 257, 275, 259, 258, 276, 260, 259, 277, 261, 260, 278, 262, 261, 279, 263, 262, 280, 264, 263, 281, 265, 264, 282, 266, 265, 283, 267, 266, 284, 268, 267, 285, 269, 268, 286, 270, 269, 287, 271, 270, 288],
            },
            cube: {
                vertices: [0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5],
                indexes: [0, 2, 1, 2, 3, 1, 4, 6, 5, 6, 7, 5, 8, 10, 9, 10, 11, 9, 12, 14, 13, 14, 15, 13, 16, 18, 17, 18, 19, 17, 20, 22, 21, 22, 23, 21],
            },
            sprite: {
                vertices: [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0],
                indexes: [0, 1, 2, 0, 2, 3],
            },
        }

}